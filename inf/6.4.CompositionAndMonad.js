/**
 * 6.4. Composition, Monad
 * 함수 합정 관점에서 비동기
 * 프로미스는 합성 과정에서 비동기 합성을 안전하게 하는 방법?
 * 
 * 함수합성
 * f ∘ g
 * f(g(x));
 * 
 * 상황에 따라 안전하게 합성하게 하는 방법으로 모나드
 * 비동기 합성을 돕는게 Promise
 * 
 * JS는 타입을 고민하며 하는 언어는 아님.
 * 모나드를 직접적으로 만들며 이용하지는 않음
 * 모나드를 알고 있으면, 안전한 함수 합성, 함수형 JS에 좋은 사고나 응용력을 가질 수 있음.
 * 
 * 값이 있는지 모르는 상황에서 안전하게 합성하는 방법 -> 모나드
 */

const g = a => a + 1;
const f = a => a * a;

console.log(f(g(1)));

// 여기서 array는 필요한 값이 아님. 계산을 위한 도구일 뿐 -> 결론이 아님
// 박에서 값이 있는지 없는지에 따라 함수 합성을 안전하게 하고 있음

[]
  .map(g)
  .map(f)
  .forEach(e => console.log(e))

// Promise는 어떤 함수를 사용해서 합성을 하는가? -> then을 통해 합성
// 비동기적으로 일어나는 상황을 안전하게 합성하는 방법으로 사용

Promise.resolve(1).then(g).then(f).then(d => console.log(d))

